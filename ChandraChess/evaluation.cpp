#include <bit>
#include <iostream>
#include <vector>
#include "state.h"
#include "bits.h"
#include "board.h"
#include "staticExchangeEvaluation.h"
#include "table.h"
int middleGamePieceValues[6] = {0, 1839, 890, 626, 607, 123};
int endGamePieceValues[6] = {0, 1350, 721, 391, 350, 144};
int middleGamePieceSquareTables[6][64] = {
  {
    82, 75, 99, 60, 99, 118, 73, 36, 
    26, 151, 110, 83, 75, 123, 31, -45, 
    61, 170, 31, 72, -9, 79, 107, 18, 
    18, 27, 44, -28, -62, -19, 23, -48, 
    23, 26, -23, -107, -85, -105, -50, -120, 
    -12, 7, -112, -127, -118, -79, -19, -62, 
    25, -40, -69, -134, -111, -72, 7, 2, 
    -106, 17, -19, -127, -29, -76, 31, 12, 
  },
  {
    -54, -23, 12, 39, 43, 52, -8, -10, 
    -47, -77, -61, -65, -64, 89, 10, 128, 
    -35, -38, 6, 12, 55, 69, 117, 70, 
    -47, -29, -31, -24, -13, -1, -18, 18, 
    -31, -23, -24, -23, -4, -12, 2, -18, 
    -26, 1, -8, -4, -3, 9, 8, -13, 
    -14, 5, 4, 19, 25, 38, 34, 12, 
    2, 7, 13, 25, 16, -16, -45, 0, 
  },
  {
    -8, 10, 4, 8, 16, 17, 1, -24, 
    -24, -40, 14, 48, 8, 53, 90, 40, 
    -8, -11, -10, 27, 62, 67, 58, 61, 
    -60, -24, 1, 26, -5, 8, 26, 36, 
    -52, -56, -54, -31, -26, -30, 6, -28, 
    -51, -36, -20, -1, 0, -3, 17, -2, 
    -53, -24, -28, -6, -1, 0, 27, -71, 
    -16, -5, 20, 27, 37, 18, -28, 0, 
  },
  {
    -48, -90, -48, -90, -152, -68, -24, -106, 
    -72, -12, -40, -22, -12, 63, -31, 23, 
    -29, -7, 53, -11, 61, 52, 61, 43, 
    -49, -11, 7, 33, 29, -20, 8, -14, 
    -13, -2, 6, 41, 47, 5, 13, -28, 
    31, 31, 31, 17, 27, 38, 15, 25, 
    -14, 46, 21, 18, 28, 47, 65, 17, 
    15, -5, 16, 2, -6, -12, 8, 5, 
  },
  {
    -283, -59, -76, -24, 4, -157, -135, -171, 
    -118, -60, 109, 15, 116, 88, 10, -18, 
    -22, 11, 24, 78, 116, 144, 89, -8, 
    23, 26, 11, 72, 30, 50, 12, 51, 
    -2, 0, 22, 22, 37, 44, 22, -13, 
    -28, -2, 25, 22, 38, 28, 37, -19, 
    -17, -34, 4, 35, 33, 28, 8, 11, 
    -67, -7, -46, -16, -5, -4, -9, -78, 
  },
  {
    0, 0, 0, 0, 0, 0, 0, 0, 
    -26, -71, -87, -42, 12, -14, -72, -124, 
    -42, -51, -13, -54, 3, 99, -3, -17, 
    -10, -3, -3, 18, 30, 20, -7, -16, 
    -20, -6, 9, 37, 30, 21, -2, -37, 
    -6, 1, 21, 22, 41, 12, 52, 15, 
    -2, 22, 7, 29, 33, 65, 85, 23, 
    0, 0, 0, 0, 0, 0, 0, 0, 
  }
};
int endGamePieceSquareTables[6][64] = {
  {
    -89, -27, -32, -19, -18, -15, -18, -49, 
    -30, -7, -6, -8, -4, 14, 27, 9, 
    -38, -6, 9, 1, 15, 22, 21, 0, 
    -52, -8, 7, 22, 21, 26, 12, -3, 
    -51, -13, 16, 32, 33, 35, 13, 0, 
    -39, -3, 30, 40, 41, 36, 15, -1, 
    -35, 7, 25, 44, 41, 38, 14, -12, 
    -18, -18, 4, 14, -13, 13, -26, -59, 
  },
  {
    -13, 0, -1, 12, 6, 17, -16, 18, 
    0, 12, 27, 61, 54, 67, 52, -58, 
    -39, -11, 7, 7, 51, 31, 1, 9, 
    -20, 16, 1, 27, 47, 62, 44, 11, 
    -3, 9, 13, 36, 24, 24, 15, 5, 
    -46, -46, 14, -2, 15, 4, 14, -10, 
    -15, -14, -9, -16, -17, -66, -69, -48, 
    -22, -46, -36, -37, -28, -28, -35, -64, 
  },
  {
    30, 20, 24, 14, 11, 6, 8, 17, 
    20, 38, 22, 9, 7, 4, -10, -8, 
    11, 14, 11, 3, -12, -12, -8, -22, 
    21, 8, 11, 1, 5, 3, -8, -14, 
    11, 14, 18, 16, 11, 3, -13, -12, 
    -3, 1, -3, -6, -9, -16, -28, -27, 
    -3, -6, 7, -4, -9, -9, -21, -3, 
    -7, -3, -10, -7, -23, -19, -7, -44, 
  },
  {
    -8, -16, -14, -3, 8, -1, -12, 10, 
    1, -2, 4, -7, 1, -15, 11, -44, 
    11, 10, 4, 23, 0, 19, -5, -15, 
    19, 21, 17, 29, 22, 14, -2, -5, 
    -4, 2, 24, 15, 15, 18, -7, -3, 
    -17, 6, 11, 22, 22, 7, -8, -14, 
    1, -21, -9, -1, 2, -3, -10, -22, 
    -26, -6, -16, 2, 3, 7, -23, -14, 
  },
  {
    -35, -60, -16, -14, -22, -21, -30, -100, 
    -8, 5, -26, 7, -31, -28, -28, -46, 
    -20, -3, 45, 31, 1, 11, -25, -16, 
    2, 30, 50, 59, 47, 47, 29, -13, 
    9, 22, 46, 51, 53, 30, 6, 16, 
    -3, 15, 4, 43, 43, 5, -6, -16, 
    -19, -5, -4, -2, -2, 3, -7, -24, 
    -48, -11, -1, 19, -2, 10, -20, -19, 
  },
  {
    0, 0, 0, 0, 0, 0, 0, 0, 
    145, 139, 131, 84, 64, 84, 136, 133, 
    58, 45, 30, 4, -10, -17, 18, 32, 
    0, -17, -25, -45, -42, -34, -22, -18, 
    -18, -30, -40, -48, -42, -42, -40, -30, 
    -30, -40, -43, -39, -35, -32, -50, -41, 
    -22, -41, -26, -32, -31, -32, -56, -45, 
    0, 0, 0, 0, 0, 0, 0, 0, 
  }
};
int passedPawnBonuses[8] = {0, 104, 93, 39, -1, -32, -40, 0};
int isolatedPawnPenalty = 19;
int backwardPawnPenalty = 14;
int farFromOpponentKing[7] = {-110, -59, -20, 13, 35, 53, 62};
int farFromOurKing[7] = {-92, -109, -77, -51, -27, -20, -23};
int bishopPairBonus = 66;
int queenMiddleGameMobilityBonuses[28] = {-55, -50, -47, -44, -38, -30, -28, -23, -17, -11, -12, -8, -14, -2, 5, -6, -1, 13, 23, 26, 38, 32, 23, 44, 49, 27, 69, 41};
int rookMiddleGameMobilityBonuses[15] = {-58, -39, -37, -28, -26, -12, -6, 6, 16, 20, 28, 49, 48, 22, 10};
int bishopMiddleGameMobilityBonuses[14] = {-58, -38, -23, -11, -3, -3, 2, 7, 11, 23, 30, 59, -11, 16};
int knightMiddleGameMobilityBonuses[9] = {-72, -26, -10, -3, 10, 16, 22, 23, 41};
int queenEndGameMobilityBonuses[28] = {-93, -102, -86, -57, -51, -40, -23, -21, -15, -4, -3, 3, 10, 14, 16, 29, 23, 24, 36, 34, 40, 37, 27, 28, 42, 28, 70, 29};
int rookEndGameMobilityBonuses[15] = {-35, -23, -17, -17, -6, -5, 1, 2, 2, 7, 12, 13, 25, 26, 21};
int bishopEndGameMobilityBonuses[14] = {-53, -31, -20, -11, -1, 11, 20, 12, 22, 11, 11, -8, 40, -7};
int knightEndGameMobilityBonuses[9] = {-34, -18, 6, 9, 11, 18, 14, 12, -18};
int attackerWeightsByPiece[4] = {80, 40, 20, 20};
int attackerWeightsByNumber[8] = {0, 0, 50, 75, 88, 94, 97, 99};
int middleGamePieceBonuses[12][64];
int endGamePieceBonuses[12][64];
int piecePhases[12] = {0, 4, 2, 1, 1, 0, 0, 4, 2, 1, 1, 0};
int* mobilityBonuses[2][4] = {
  {queenMiddleGameMobilityBonuses, rookMiddleGameMobilityBonuses, bishopMiddleGameMobilityBonuses, knightMiddleGameMobilityBonuses},
  {queenEndGameMobilityBonuses, rookEndGameMobilityBonuses, bishopEndGameMobilityBonuses, knightEndGameMobilityBonuses}
};
int rayStarts[3] = {0, 0, 1};
int rayIncrements[3] = {1, 2, 2};
void initializeEvaluation() {
  for (int piece = 0; piece < 6; piece++) {
    for (int square = 0; square < 64; square++) {
      int flippedSquare = square ^ 56;
      int middleGameValue = middleGamePieceValues[piece] + middleGamePieceSquareTables[piece][square];
      int endGameValue = endGamePieceValues[piece] + endGamePieceSquareTables[piece][square];
      middleGamePieceBonuses[piece][flippedSquare] = -middleGameValue;
      middleGamePieceBonuses[piece + 6][square] = middleGameValue;
      endGamePieceBonuses[piece][flippedSquare] = -endGameValue;
      endGamePieceBonuses[piece + 6][square] = endGameValue;
    }
  }
}
